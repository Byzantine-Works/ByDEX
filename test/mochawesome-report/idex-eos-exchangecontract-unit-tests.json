{
  "stats": {
    "suites": 1,
    "tests": 40,
    "passes": 40,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-20T04:46:43.435Z",
    "end": "2018-10-20T04:46:54.943Z",
    "duration": 11508,
    "testsRegistered": 40,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3b34abc0-ef3d-4caa-9758-edfbb73ee973",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c742ea40-9044-4760-bc37-5113a8d3d05a",
        "title": "IDEX EOS-ExchangeContract",
        "fullFile": "/Users/manjunanth.reddy/f42/projects/byzantine/codes/UberDEX/test/UberDEX.unit.tests.js",
        "file": "/UberDEX.unit.tests.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "a7891650-3ffb-45b6-8545-51ef6aedbd86",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "8180b1fb-7195-420e-b649-a4cdfc82de66",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "[1] should return matching node version => 4f4e5c22",
            "fullTitle": "IDEX EOS-ExchangeContract [1] should return matching node version => 4f4e5c22",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .get('/info')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.server_version).to.be.an('string');\n        expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bcfe4d73-5274-4940-b55d-9972fea385f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[2] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [2] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 389,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7e61f59b-da2b-40f4-bb26-045135d286d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[3] should allow setting an exchange admin account",
            "fullTitle": "IDEX EOS-ExchangeContract [3] should allow setting an exchange admin account",
            "timedOut": false,
            "duration": 326,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/setAdmin')\n    .send({\n        account: EXCHANGE_ADMIN,\n        isAdmin: true\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dfdf9946-0a69-447d-9c44-b1b50690c61a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "fullTitle": "IDEX EOS-ExchangeContract [4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "timedOut": false,
            "duration": 298,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/setLockParameters')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        tradelockperiod: TRADE_LOCK_PERIOD,\n        fundsreleaseperiod: FUNDS_RELEASE_PERIOD\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7f653966-ab14-4065-9de8-9bafe92b57ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "timedOut": false,
            "duration": 369,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7f961b72-4358-4a45-9120-ec7292f7bb8a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[6] should allow user to lock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [6] should allow user to lock his exchange account",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/lock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c855dba3-86d3-4fbf-8add-ff0849d8eae6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[7] should have zero fee-account-ledger balance for symbol EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [7] should have zero fee-account-ledger balance for symbol EOS",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'EOS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0bcf6834-8c5f-4806-82d4-e9f1afef8b4b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[8] should have zero fee-account-ledger balance for symbol SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [8] should have zero fee-account-ledger balance for symbol SYS",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'SYS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4653fea2-c2c7-4581-a26e-775385b36aad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 228,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "18b48366-73f9-46fc-8c13-8e030384735b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 324,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ae2ff5dc-c353-4d42-9044-58cb41eaf3ff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 329,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "be3502cb-2d7b-434c-979a-a767ae0c17ad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 324,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b6d45aa7-42ae-4ded-87f1-5ba169977270",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 309,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "22376bae-79c7-404c-8fbe-b08a601cb70c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 306,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0140b121-6b3b-4cda-bd4f-be0e9ab7f37e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 376,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4522e5ca-c2f6-4d48-9779-45ec31969a43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 230,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "877184ce-1f21-4d08-9391-78a47c41a920",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 235,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "153dac95-5ecf-4c77-8005-fe8b805330cf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 314,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c617f2a9-cca6-4ff0-8769-3d765671c49b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "74c9d7ee-efef-43de-a0c6-0cd27242cc1e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 318,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b98c044f-3a56-46fd-9dbe-c8ecdfc24c59",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21] should allow for registering *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21] should allow for registering *maker1* accounts public_key",
            "timedOut": false,
            "duration": 295,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/register')\n    .send({\n        account: MAKER1,\n        pubkey: process.env.USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f05f4572-037b-41f4-9da4-91bb176b2f37",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[22] should allow for registering *taker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [22] should allow for registering *taker1* accounts public_key",
            "timedOut": false,
            "duration": 291,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/register')\n    .send({\n        account: TAKER1,\n        pubkey: process.env.USER_PUB_KEY //IDEX_USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "04f328a7-d5ec-4292-96da-711a4b4d7d80",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "fullTitle": "IDEX EOS-ExchangeContract [23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "timedOut": false,
            "duration": 639,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// log({\n//     amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     nonce: 1,\n//     amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     tradenonce: 1,\n//     tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     makerfee: MAKER_FEE,\n//     takerfee:TAKER_FEE,\n//     maker:MAKER1,\n//     taker: TAKER1,\n//     feeaccount:EXCHANGE\n// });\nreturn chai.request(eosapi)\n    .post('/trade')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        nonce: 1,\n        amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        tradenonce: 1,\n        tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        makerfee: MAKER_FEE,\n        takerfee: TAKER_FEE,\n        maker: MAKER1,\n        taker: TAKER1,\n        feeaccount: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f94753e1-6fba-46c1-85b0-6f1bf909fa83",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "fullTitle": "IDEX EOS-ExchangeContract [24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "timedOut": false,
            "duration": 293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var makerFee = getAmountForSymbol(balanceJson, \"SYS\");\n        var takerFee = getAmountForSymbol(balanceJson, \"EOS\");\n        log(\"makerFee:takerFee accrued on ledger account => EOS@\" + makerFee / 10000 + \":SYS@\" + takerFee / 10000);\n        expect(makerFee).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (MAKER_FEE / 10000));\n        expect(takerFee).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (TAKER_FEE / 10000));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "06177780-caf9-4296-acb4-1b1e77d5dab1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 352,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Maker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Maker Bal should be->SYS@\" + (1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        log(\"Maker Bal should be->EOS@\" + (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens).to.equal(899.974 * 10000);\n        // expect(eos_tokens / 10000).to.equal((1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        // expect(sys_tokens / 10000).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "58888a0a-180d-4fa2-bbaf-7aad854c1811",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 296,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Taker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Taker Bal should be->SYS@\" + (1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        log(\"Taker Bal should be->EOS@\" + (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        //expect(sys_tokens / 10000).to.equal((1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        //expect(eos_tokens / 10000).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(sys_tokens).to.equal(899.984 * 10000);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19ecd062-2524-4cfe-a18a-6cf59ca553d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 294,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b04ff633-f678-45d5-9490-32e3f8756076",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 302,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "537a2922-ab29-4667-af54-4b06cd99b644",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 319,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c8ed1f3-6a27-4ab3-8f86-d7e0d79c021f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 234,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "10f3de5d-bebe-40ca-adb7-f051c562a3b5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "timedOut": false,
            "duration": 295,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"LEDGER balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"LEDGER Bal should be-> 0.026 SYS\");\n        log(\"LEDGER Bal should be->0.016 EOS\");\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens / 10000).to.equal(0.026);\n        expect(sys_tokens / 10000).to.equal(0.016);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e1e620e-75f7-4406-9ac2-0f0a50cbfd06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.0000 IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.0000 IQ",
            "timedOut": false,
            "duration": 344,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/deposit')\n    .send({\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "67f39ca1-7fe0-4f97-aa55-cd32852eb8b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.0000 IQ@everipediaiq",
            "fullTitle": "IDEX EOS-ExchangeContract [34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.0000 IQ@everipediaiq",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_WITHDRAW_TRADE_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "340db5b7-5a03-4f96-8af3-855c59ed3a8f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "timedOut": false,
            "duration": 299,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_WITHDRAW_AMOUNT,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6031c21c-0b6f-4566-8a55-e348dd3f23c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[36] should allow order invalidations for nonce <= 50",
            "fullTitle": "IDEX EOS-ExchangeContract [36] should allow order invalidations for nonce <= 50",
            "timedOut": false,
            "duration": 312,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/invalidateOrders')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: ESCAPE_HATCH_TEST_USER,\n        nonce: invalidate_orders_before_nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a291e3b-05f8-4361-a3a5-0d2b18ab7f83",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 311,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ea2d416c-b402-45f0-896f-d18c3520f156",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 309,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 3\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a902b952-8a3c-419c-b66e-9d0f76e95dd1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[39] should allow user to unlock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [39] should allow user to unlock his exchange account",
            "timedOut": false,
            "duration": 299,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/unlock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "516f9331-dee2-4fbf-8043-b00c434b6173",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 257,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: POST_UNLOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 4\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(400);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6462a76e-e901-4489-bcfd-5a125c767d34",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 229,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(eosapi)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "54c90a37-1b39-4ad3-8507-c5b3becdd0b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bcfe4d73-5274-4940-b55d-9972fea385f4",
          "7e61f59b-da2b-40f4-bb26-045135d286d5",
          "dfdf9946-0a69-447d-9c44-b1b50690c61a",
          "7f653966-ab14-4065-9de8-9bafe92b57ec",
          "7f961b72-4358-4a45-9120-ec7292f7bb8a",
          "c855dba3-86d3-4fbf-8add-ff0849d8eae6",
          "0bcf6834-8c5f-4806-82d4-e9f1afef8b4b",
          "4653fea2-c2c7-4581-a26e-775385b36aad",
          "18b48366-73f9-46fc-8c13-8e030384735b",
          "ae2ff5dc-c353-4d42-9044-58cb41eaf3ff",
          "be3502cb-2d7b-434c-979a-a767ae0c17ad",
          "b6d45aa7-42ae-4ded-87f1-5ba169977270",
          "22376bae-79c7-404c-8fbe-b08a601cb70c",
          "0140b121-6b3b-4cda-bd4f-be0e9ab7f37e",
          "4522e5ca-c2f6-4d48-9779-45ec31969a43",
          "877184ce-1f21-4d08-9391-78a47c41a920",
          "153dac95-5ecf-4c77-8005-fe8b805330cf",
          "c617f2a9-cca6-4ff0-8769-3d765671c49b",
          "74c9d7ee-efef-43de-a0c6-0cd27242cc1e",
          "b98c044f-3a56-46fd-9dbe-c8ecdfc24c59",
          "f05f4572-037b-41f4-9da4-91bb176b2f37",
          "04f328a7-d5ec-4292-96da-711a4b4d7d80",
          "f94753e1-6fba-46c1-85b0-6f1bf909fa83",
          "06177780-caf9-4296-acb4-1b1e77d5dab1",
          "58888a0a-180d-4fa2-bbaf-7aad854c1811",
          "19ecd062-2524-4cfe-a18a-6cf59ca553d5",
          "b04ff633-f678-45d5-9490-32e3f8756076",
          "537a2922-ab29-4667-af54-4b06cd99b644",
          "3c8ed1f3-6a27-4ab3-8f86-d7e0d79c021f",
          "10f3de5d-bebe-40ca-adb7-f051c562a3b5",
          "8e1e620e-75f7-4406-9ac2-0f0a50cbfd06",
          "67f39ca1-7fe0-4f97-aa55-cd32852eb8b8",
          "340db5b7-5a03-4f96-8af3-855c59ed3a8f",
          "6031c21c-0b6f-4566-8a55-e348dd3f23c6",
          "8a291e3b-05f8-4361-a3a5-0d2b18ab7f83",
          "ea2d416c-b402-45f0-896f-d18c3520f156",
          "a902b952-8a3c-419c-b66e-9d0f76e95dd1",
          "516f9331-dee2-4fbf-8043-b00c434b6173",
          "6462a76e-e901-4489-bcfd-5a125c767d34",
          "54c90a37-1b39-4ad3-8507-c5b3becdd0b0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11487,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}