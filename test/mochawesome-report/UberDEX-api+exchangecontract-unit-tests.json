{
  "stats": {
    "suites": 1,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-31T06:02:47.382Z",
    "end": "2018-10-31T06:02:57.054Z",
    "duration": 9672,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "28491139-a548-4ea1-bef2-8b533dd1caa9",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "4543b430-d109-4744-8807-8aac8460fe31",
        "title": "IDEX EOS-ExchangeContract",
        "fullFile": "/Users/manjunath.reddy/f42/projects/byzantine/codes/UberDEX/test/UberDEX.unit.tests.js",
        "file": "/UberDEX.unit.tests.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "fa9360e4-a797-4f53-b3b8-0d1cd4421400",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "403e4a30-a215-4a57-b4e7-39eddaa69e6a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "[1] should return matching node version => 4f4e5c22",
            "fullTitle": "IDEX EOS-ExchangeContract [1] should return matching node version => 4f4e5c22",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/info')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.server_version).to.be.an('string');\n        expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9fbb07b2-f829-4c3e-9821-a79d555f6e43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[2] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [2] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 365,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "af77a763-d6cd-4d36-843f-19b85e0e4598",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[3] should allow setting an exchange admin account",
            "fullTitle": "IDEX EOS-ExchangeContract [3] should allow setting an exchange admin account",
            "timedOut": false,
            "duration": 257,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setAdmin')\n    .send({\n        account: EXCHANGE_ADMIN,\n        isAdmin: true\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "87432e7a-20b1-43ab-9e84-acb1bd541058",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "fullTitle": "IDEX EOS-ExchangeContract [4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setLockParameters')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        tradelockperiod: TRADE_LOCK_PERIOD,\n        fundsreleaseperiod: FUNDS_RELEASE_PERIOD\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "765fccf7-eaff-4214-9578-5a1b523b0ff1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "07887d41-eab4-4939-9c73-164c41c49384",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[6] should allow user to lock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [6] should allow user to lock his exchange account",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/lock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f9675bc9-eb43-402e-9af4-e92692c8b6df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[7] should have zero fee-account-ledger balance for symbol EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [7] should have zero fee-account-ledger balance for symbol EOS",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'EOS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0dd66c48-0acf-4f5b-a64d-3a3e1a84f10f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[8] should have zero fee-account-ledger balance for symbol SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [8] should have zero fee-account-ledger balance for symbol SYS",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'SYS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f0a8f14a-4df8-4cc9-833f-c5854fc5a6e8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2c45848c-bf08-46e4-976b-0c598702ea4d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 229,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e5cf3513-dd3a-4b9f-9a35-7ab335ea86a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 211,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5def0439-5549-4fb2-b276-9970855654b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 243,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6256c0c9-5a2c-4f83-bbc1-b3742daa1471",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 193,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0fbd63e6-c0f6-4184-b3a3-018c40c79ae9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 317,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47cdb2ee-3bf8-4e1d-93dd-4bda97695a5b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 277,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4806c34c-84fe-4a48-8c56-71fc52dacc99",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f42a69fc-5b81-4e23-ab85-822c3920082b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8b40e928-d73f-422c-b9ac-3a89c5eb3b69",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b0c2a41-b8f9-4e1a-9f82-631c0e8f2601",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5be26d40-3d29-45d0-a7fe-be3d2ef38207",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 198,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "194d0519-5d06-4d60-8fe2-a3527118a131",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21] should allow for registering *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21] should allow for registering *maker1* accounts public_key",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: MAKER1,\n        pubkey: process.env.USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "21a11170-e9bc-4933-bd03-5288064fcbee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21.1] should allow checking for registered key for *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21.1] should allow checking for registered key for *maker1* accounts public_key",
            "timedOut": false,
            "duration": 181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/ispkpaired')\n    .send({\n        account: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var keyExists = JSON.parse(res.body.processed.action_traces[0].console.replace(/\\'/g, \"\\\"\"));\n        expect(keyExists.public_key_exists).to.equal(true);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "02b66207-7e69-47a6-8679-489d2d560f64",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[22] should allow for registering *taker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [22] should allow for registering *taker1* accounts public_key",
            "timedOut": false,
            "duration": 236,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: TAKER1,\n        pubkey: process.env.USER_PUB_KEY //IDEX_USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b4bae8a2-65d6-497c-abb3-7708a1d444ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "fullTitle": "IDEX EOS-ExchangeContract [23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "timedOut": false,
            "duration": 516,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// log({\n//     amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     nonce: 1,\n//     amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     tradenonce: 1,\n//     tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     makerfee: MAKER_FEE,\n//     takerfee:TAKER_FEE,\n//     maker:MAKER1,\n//     taker: TAKER1,\n//     feeaccount:EXCHANGE\n// });\nreturn chai.request(uberdexAPI)\n    .post('/trade')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        nonce: 1,\n        amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        tradenonce: 1,\n        tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        makerfee: MAKER_FEE,\n        takerfee: TAKER_FEE,\n        maker: MAKER1,\n        taker: TAKER1,\n        feeaccount: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1dad7f15-4f8e-4729-af9b-fc59ec3a531b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "fullTitle": "IDEX EOS-ExchangeContract [24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "timedOut": false,
            "duration": 230,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var makerFee = getAmountForSymbol(balanceJson, \"SYS\");\n        var takerFee = getAmountForSymbol(balanceJson, \"EOS\");\n        log(\"makerFee:takerFee accrued on ledger account => EOS@\" + makerFee / 10000 + \":SYS@\" + takerFee / 10000);\n        expect(makerFee).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (MAKER_FEE / 10000));\n        expect(takerFee).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (TAKER_FEE / 10000));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6c30c91d-a44e-4acd-abb0-aeea7e832115",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Maker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Maker Bal should be->SYS@\" + (1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        log(\"Maker Bal should be->EOS@\" + (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens).to.equal(899.974 * 10000);\n        // expect(eos_tokens / 10000).to.equal((1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        // expect(sys_tokens / 10000).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "558c04b9-f214-47d8-b57b-343c55d2fbc8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 222,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Taker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Taker Bal should be->SYS@\" + (1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        log(\"Taker Bal should be->EOS@\" + (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        //expect(sys_tokens / 10000).to.equal((1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        //expect(eos_tokens / 10000).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(sys_tokens).to.equal(899.984 * 10000);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a360a9f3-1b96-4495-badc-c4fce9247f9e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 197,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f6ad1a3d-364c-4322-9cdc-eb19c209befc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 198,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b511065-f43f-4261-85fb-96f257ca4118",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 195,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "21a5fdbb-64f7-427e-bd90-89167917b705",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 202,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "59986802-6111-4b91-a45a-15daba4eeb60",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"LEDGER balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"LEDGER Bal should be-> 0.026 SYS\");\n        log(\"LEDGER Bal should be->0.016 EOS\");\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens / 10000).to.equal(0.026);\n        expect(sys_tokens / 10000).to.equal(0.016);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c31ee866-47e4-442e-b689-dad5c32eca73",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "timedOut": false,
            "duration": 203,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fc2f8cd5-c5e4-4f15-96c1-cf0e19ea0739",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "fullTitle": "IDEX EOS-ExchangeContract [34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "timedOut": false,
            "duration": 370,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_WITHDRAW_TRADE_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f3ebf2cd-768c-472c-b02c-260be21073a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "timedOut": false,
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_WITHDRAW_AMOUNT,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d8a86805-1a38-438d-ba1e-69dcd5e11e46",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[36] should allow order invalidations for nonce <= 50",
            "fullTitle": "IDEX EOS-ExchangeContract [36] should allow order invalidations for nonce <= 50",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/invalidateOrders')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: ESCAPE_HATCH_TEST_USER,\n        nonce: invalidate_orders_before_nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c27f40f6-df98-457b-8a1a-fec0652e32c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "51b7724f-0f08-48be-a74b-b1b133c37c11",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 322,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 3\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2f6aee20-db4a-4a72-8692-baef845b4e57",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[39] should allow user to unlock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [39] should allow user to unlock his exchange account",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/unlock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b93e2c09-622b-4166-900f-3c31881e39a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 244,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: POST_UNLOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 4\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(400);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c12dbbb4-3832-4fbc-baac-e373cfcb8862",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 250,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4e04fe96-3000-4e04-b830-ee33ddf9ece1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should return EOS Derivative Token + Symbols",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should return EOS Derivative Token + Symbols",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/symbols')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0e38bcf0-df83-4537-9b9e-c7c47c2ad6aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[42] should return EOS Derivative Token Symbol Ticker",
            "fullTitle": "IDEX EOS-ExchangeContract [42] should return EOS Derivative Token Symbol Ticker",
            "timedOut": false,
            "duration": 27,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/ticker')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "85682c46-305f-460d-87cc-15a3714a93b7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[43] should return Ticker data for a specific symbol => IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [43] should return Ticker data for a specific symbol => IQ",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/tickerBySymbol')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "46b2d20f-f503-438b-86ba-c64ce5f317d9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolBuySide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bc636d0a-298c-4788-b89f-58809e943a5d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolSellSide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "578466a7-b105-4f95-a547-71a8d1ca2c43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderbook')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4efc425b-7018-4ca9-95de-4073affcf3b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9fbb07b2-f829-4c3e-9821-a79d555f6e43",
          "af77a763-d6cd-4d36-843f-19b85e0e4598",
          "87432e7a-20b1-43ab-9e84-acb1bd541058",
          "765fccf7-eaff-4214-9578-5a1b523b0ff1",
          "07887d41-eab4-4939-9c73-164c41c49384",
          "f9675bc9-eb43-402e-9af4-e92692c8b6df",
          "0dd66c48-0acf-4f5b-a64d-3a3e1a84f10f",
          "f0a8f14a-4df8-4cc9-833f-c5854fc5a6e8",
          "2c45848c-bf08-46e4-976b-0c598702ea4d",
          "e5cf3513-dd3a-4b9f-9a35-7ab335ea86a0",
          "5def0439-5549-4fb2-b276-9970855654b0",
          "6256c0c9-5a2c-4f83-bbc1-b3742daa1471",
          "0fbd63e6-c0f6-4184-b3a3-018c40c79ae9",
          "47cdb2ee-3bf8-4e1d-93dd-4bda97695a5b",
          "4806c34c-84fe-4a48-8c56-71fc52dacc99",
          "f42a69fc-5b81-4e23-ab85-822c3920082b",
          "8b40e928-d73f-422c-b9ac-3a89c5eb3b69",
          "5b0c2a41-b8f9-4e1a-9f82-631c0e8f2601",
          "5be26d40-3d29-45d0-a7fe-be3d2ef38207",
          "194d0519-5d06-4d60-8fe2-a3527118a131",
          "21a11170-e9bc-4933-bd03-5288064fcbee",
          "02b66207-7e69-47a6-8679-489d2d560f64",
          "b4bae8a2-65d6-497c-abb3-7708a1d444ee",
          "1dad7f15-4f8e-4729-af9b-fc59ec3a531b",
          "6c30c91d-a44e-4acd-abb0-aeea7e832115",
          "558c04b9-f214-47d8-b57b-343c55d2fbc8",
          "a360a9f3-1b96-4495-badc-c4fce9247f9e",
          "f6ad1a3d-364c-4322-9cdc-eb19c209befc",
          "0b511065-f43f-4261-85fb-96f257ca4118",
          "21a5fdbb-64f7-427e-bd90-89167917b705",
          "59986802-6111-4b91-a45a-15daba4eeb60",
          "c31ee866-47e4-442e-b689-dad5c32eca73",
          "fc2f8cd5-c5e4-4f15-96c1-cf0e19ea0739",
          "f3ebf2cd-768c-472c-b02c-260be21073a1",
          "d8a86805-1a38-438d-ba1e-69dcd5e11e46",
          "c27f40f6-df98-457b-8a1a-fec0652e32c7",
          "51b7724f-0f08-48be-a74b-b1b133c37c11",
          "2f6aee20-db4a-4a72-8692-baef845b4e57",
          "b93e2c09-622b-4166-900f-3c31881e39a0",
          "c12dbbb4-3832-4fbc-baac-e373cfcb8862",
          "4e04fe96-3000-4e04-b830-ee33ddf9ece1",
          "0e38bcf0-df83-4537-9b9e-c7c47c2ad6aa",
          "85682c46-305f-460d-87cc-15a3714a93b7",
          "46b2d20f-f503-438b-86ba-c64ce5f317d9",
          "bc636d0a-298c-4788-b89f-58809e943a5d",
          "578466a7-b105-4f95-a547-71a8d1ca2c43",
          "4efc425b-7018-4ca9-95de-4073affcf3b2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9648,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}