{
  "stats": {
    "suites": 1,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2018-11-03T03:25:13.598Z",
    "end": "2018-11-03T03:25:24.738Z",
    "duration": 11140,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "40817f19-cc0f-49b6-9292-6efd803a6990",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c6e00298-1c82-4ef2-ae6d-6a7689ec0470",
        "title": "IDEX EOS-ExchangeContract",
        "fullFile": "/Users/manjunath.reddy/f42/projects/byzantine/codes/UberDEX/test/UberDEX.unit.tests.js",
        "file": "/UberDEX.unit.tests.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "c96b7a94-79a5-4cfc-a545-d69e5db15c7a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "0dd1daa2-d7f5-4ffa-9ce6-1f01e0bdf8c5",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "[1] should return matching node version => 4f4e5c22",
            "fullTitle": "IDEX EOS-ExchangeContract [1] should return matching node version => 4f4e5c22",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/info')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.server_version).to.be.an('string');\n        expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "03282328-7828-4e80-bd7d-5d3adfb07c22",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[2] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [2] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 357,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3c248ef9-8210-4dd9-810f-5c7d963f0839",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[3] should allow setting an exchange admin account",
            "fullTitle": "IDEX EOS-ExchangeContract [3] should allow setting an exchange admin account",
            "timedOut": false,
            "duration": 289,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setAdmin')\n    .send({\n        account: EXCHANGE_ADMIN,\n        isAdmin: true\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ac385657-c1ee-4dd4-ae19-5645ea5b9b86",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "fullTitle": "IDEX EOS-ExchangeContract [4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "timedOut": false,
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setLockParameters')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        tradelockperiod: TRADE_LOCK_PERIOD,\n        fundsreleaseperiod: FUNDS_RELEASE_PERIOD\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "00c876a2-2c71-488e-879a-e67e668426c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "timedOut": false,
            "duration": 218,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1d5a1a97-6d1b-487c-b015-b2fde95dd0e2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[6] should allow user to lock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [6] should allow user to lock his exchange account",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/lock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "50f3a0ea-0488-44a2-aa0f-686f14169639",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[7] should have zero fee-account-ledger balance for symbol EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [7] should have zero fee-account-ledger balance for symbol EOS",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'EOS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "829f1bb0-a6d1-4389-883f-b98bb94f6078",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[8] should have zero fee-account-ledger balance for symbol SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [8] should have zero fee-account-ledger balance for symbol SYS",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'SYS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7409c8b-4e39-46f8-8ce3-0f2c55a691aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8ba33414-cc28-4b14-b3c8-6d73da5ab6ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dec052d6-f909-4bef-8518-99951de69cdb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 287,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b282a4e1-1bee-42eb-b8ed-82de60885ae4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 217,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "da8fd352-08fa-4101-94b6-604e7dfda7d3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 219,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fe57a959-2ef4-452a-ac06-a7b1e370c4da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 205,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0937de6e-63d6-43bc-ad8d-50133f73325d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "82a79ba0-b4c8-44dd-8e10-97299535e342",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 218,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "49b9ab96-6047-4954-a0f0-a05f8ab00b15",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 203,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a22be4d-0185-4085-a6b8-127d8cbf939f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ebb2783-d21c-439c-aa23-69d8a65e5211",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 213,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "77489ed7-585c-40e6-ad54-9a62d204fc27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "45cdd6d4-e29d-4b37-ad56-ae94d44e2fd2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21] should allow for registering *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21] should allow for registering *maker1* accounts public_key",
            "timedOut": false,
            "duration": 312,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: MAKER1,\n        pubkey: process.env.USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e5af7759-ed14-4e19-96e4-cc6e54eb49fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21.1] should allow checking for registered key for *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21.1] should allow checking for registered key for *maker1* accounts public_key",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/ispkpaired')\n    .send({\n        account: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var keyExists = JSON.parse(res.body.processed.action_traces[0].console.replace(/\\'/g, \"\\\"\"));\n        expect(keyExists.public_key_exists).to.equal(true);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "80931c83-485b-4a93-9e28-ddd66d7d1721",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[22] should allow for registering *taker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [22] should allow for registering *taker1* accounts public_key",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: TAKER1,\n        pubkey: process.env.USER_PUB_KEY //IDEX_USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d0c1426b-b305-43c4-bb38-c9ad1d86ddb9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "fullTitle": "IDEX EOS-ExchangeContract [23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "timedOut": false,
            "duration": 591,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// log({\n//     amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     nonce: 1,\n//     amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     tradenonce: 1,\n//     tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     makerfee: MAKER_FEE,\n//     takerfee:TAKER_FEE,\n//     maker:MAKER1,\n//     taker: TAKER1,\n//     feeaccount:EXCHANGE\n// });\nreturn chai.request(uberdexAPI)\n    .post('/trade')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        nonce: 1,\n        amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        tradenonce: 1,\n        tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        makerfee: MAKER_FEE,\n        takerfee: TAKER_FEE,\n        maker: MAKER1,\n        taker: TAKER1,\n        feeaccount: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4dbf7c2b-01a7-43a0-bb3e-a4a078da6b7c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "fullTitle": "IDEX EOS-ExchangeContract [24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "timedOut": false,
            "duration": 263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var makerFee = getAmountForSymbol(balanceJson, \"SYS\");\n        var takerFee = getAmountForSymbol(balanceJson, \"EOS\");\n        log(\"makerFee:takerFee accrued on ledger account => EOS@\" + makerFee / 10000 + \":SYS@\" + takerFee / 10000);\n        expect(makerFee).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (MAKER_FEE / 10000));\n        expect(takerFee).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (TAKER_FEE / 10000));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "645425a8-04e7-42f3-b905-0258896759ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 198,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Maker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Maker Bal should be->SYS@\" + (1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        log(\"Maker Bal should be->EOS@\" + (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens).to.equal(899.974 * 10000);\n        // expect(eos_tokens / 10000).to.equal((1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        // expect(sys_tokens / 10000).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "205cf673-9014-4765-8864-61a416b0ae7b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 201,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Taker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Taker Bal should be->SYS@\" + (1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        log(\"Taker Bal should be->EOS@\" + (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        //expect(sys_tokens / 10000).to.equal((1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        //expect(eos_tokens / 10000).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(sys_tokens).to.equal(899.984 * 10000);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d5cc992d-90e9-40fc-898c-33147e329f91",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72f798d5-ec21-45d9-9c8d-994156bb0857",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 227,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eed44cf9-7cf0-4c1a-9080-47c37f3a3a6f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "79d9f394-65ce-43bc-8387-75dba15c3729",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d88e71a0-f871-4991-b6bc-2d0ba6b34571",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "timedOut": false,
            "duration": 230,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"LEDGER balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"LEDGER Bal should be-> 0.026 SYS\");\n        log(\"LEDGER Bal should be->0.016 EOS\");\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens / 10000).to.equal(0.026);\n        expect(sys_tokens / 10000).to.equal(0.016);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2848424a-9c26-479a-ba60-dcf259bf9fb9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "timedOut": false,
            "duration": 268,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4cb36a8d-0ac4-42ff-ab39-e32f58534868",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "fullTitle": "IDEX EOS-ExchangeContract [34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "timedOut": false,
            "duration": 291,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_WITHDRAW_TRADE_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2e669aae-312a-4229-a50b-3057d6f190b6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_WITHDRAW_AMOUNT,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8c2cb475-c04d-40f4-b7eb-c154224a12c2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[36] should allow order invalidations for nonce <= 50",
            "fullTitle": "IDEX EOS-ExchangeContract [36] should allow order invalidations for nonce <= 50",
            "timedOut": false,
            "duration": 317,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/invalidateOrders')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: ESCAPE_HATCH_TEST_USER,\n        nonce: invalidate_orders_before_nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "eac4655a-1076-4c94-878b-e18df9e15e59",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 271,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "79db09c6-2899-4882-b003-0889999f59fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 215,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 3\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f90dbe0f-d929-47ab-b779-e3cf9494588f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[39] should allow user to unlock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [39] should allow user to unlock his exchange account",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/unlock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "34471403-e11f-4d4f-a04b-29606c38a3ab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: POST_UNLOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 4\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(400);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a553eaf6-d436-4c02-a7af-4a0e96f668f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "66eed0e4-46b7-468a-8801-d3d1f1b867a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should return EOS Derivative Token + Symbols",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should return EOS Derivative Token + Symbols",
            "timedOut": false,
            "duration": 1046,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/symbols')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5d26c09e-dc37-40ed-93b9-bbd11455739f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[42] should return EOS Derivative Token Symbol Ticker",
            "fullTitle": "IDEX EOS-ExchangeContract [42] should return EOS Derivative Token Symbol Ticker",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/ticker')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2076d8bb-f0ed-4f31-8de1-6d6380ec9014",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[43] should return Ticker data for a specific symbol => IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [43] should return Ticker data for a specific symbol => IQ",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/tickerBySymbol')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6496c134-5ad1-458a-b336-2a4e9e98879d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolBuySide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "34a02bd0-0715-4d87-8a16-350c1465b576",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolSellSide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bf3786db-0b4c-4e69-916e-d44319f11abb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderbook')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ff581f77-7d79-468a-a723-a20759b0c950",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "03282328-7828-4e80-bd7d-5d3adfb07c22",
          "3c248ef9-8210-4dd9-810f-5c7d963f0839",
          "ac385657-c1ee-4dd4-ae19-5645ea5b9b86",
          "00c876a2-2c71-488e-879a-e67e668426c9",
          "1d5a1a97-6d1b-487c-b015-b2fde95dd0e2",
          "50f3a0ea-0488-44a2-aa0f-686f14169639",
          "829f1bb0-a6d1-4389-883f-b98bb94f6078",
          "a7409c8b-4e39-46f8-8ce3-0f2c55a691aa",
          "8ba33414-cc28-4b14-b3c8-6d73da5ab6ec",
          "dec052d6-f909-4bef-8518-99951de69cdb",
          "b282a4e1-1bee-42eb-b8ed-82de60885ae4",
          "da8fd352-08fa-4101-94b6-604e7dfda7d3",
          "fe57a959-2ef4-452a-ac06-a7b1e370c4da",
          "0937de6e-63d6-43bc-ad8d-50133f73325d",
          "82a79ba0-b4c8-44dd-8e10-97299535e342",
          "49b9ab96-6047-4954-a0f0-a05f8ab00b15",
          "8a22be4d-0185-4085-a6b8-127d8cbf939f",
          "4ebb2783-d21c-439c-aa23-69d8a65e5211",
          "77489ed7-585c-40e6-ad54-9a62d204fc27",
          "45cdd6d4-e29d-4b37-ad56-ae94d44e2fd2",
          "e5af7759-ed14-4e19-96e4-cc6e54eb49fb",
          "80931c83-485b-4a93-9e28-ddd66d7d1721",
          "d0c1426b-b305-43c4-bb38-c9ad1d86ddb9",
          "4dbf7c2b-01a7-43a0-bb3e-a4a078da6b7c",
          "645425a8-04e7-42f3-b905-0258896759ee",
          "205cf673-9014-4765-8864-61a416b0ae7b",
          "d5cc992d-90e9-40fc-898c-33147e329f91",
          "72f798d5-ec21-45d9-9c8d-994156bb0857",
          "eed44cf9-7cf0-4c1a-9080-47c37f3a3a6f",
          "79d9f394-65ce-43bc-8387-75dba15c3729",
          "d88e71a0-f871-4991-b6bc-2d0ba6b34571",
          "2848424a-9c26-479a-ba60-dcf259bf9fb9",
          "4cb36a8d-0ac4-42ff-ab39-e32f58534868",
          "2e669aae-312a-4229-a50b-3057d6f190b6",
          "8c2cb475-c04d-40f4-b7eb-c154224a12c2",
          "eac4655a-1076-4c94-878b-e18df9e15e59",
          "79db09c6-2899-4882-b003-0889999f59fb",
          "f90dbe0f-d929-47ab-b779-e3cf9494588f",
          "34471403-e11f-4d4f-a04b-29606c38a3ab",
          "a553eaf6-d436-4c02-a7af-4a0e96f668f0",
          "66eed0e4-46b7-468a-8801-d3d1f1b867a7",
          "5d26c09e-dc37-40ed-93b9-bbd11455739f",
          "2076d8bb-f0ed-4f31-8de1-6d6380ec9014",
          "6496c134-5ad1-458a-b336-2a4e9e98879d",
          "34a02bd0-0715-4d87-8a16-350c1465b576",
          "bf3786db-0b4c-4e69-916e-d44319f11abb",
          "ff581f77-7d79-468a-a723-a20759b0c950"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11116,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}