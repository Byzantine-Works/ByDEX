{
  "stats": {
    "suites": 1,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2018-11-01T03:13:52.205Z",
    "end": "2018-11-01T03:14:02.232Z",
    "duration": 10027,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e6ee8820-f8ce-45c9-9939-16c57df100e3",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b5bee3f6-f1e0-4869-85bc-dec55a6fc349",
        "title": "IDEX EOS-ExchangeContract",
        "fullFile": "/Users/manjunath.reddy/f42/projects/byzantine/codes/UberDEX/test/UberDEX.unit.tests.js",
        "file": "/UberDEX.unit.tests.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "571f4271-4437-4eb9-b146-95187058faf2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "42e012ed-cbdc-4a52-8426-bda2aa7ec830",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "[1] should return matching node version => 4f4e5c22",
            "fullTitle": "IDEX EOS-ExchangeContract [1] should return matching node version => 4f4e5c22",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/info')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.server_version).to.be.an('string');\n        expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a11d27d0-7502-4226-bf03-a77ba45a8db7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[2] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [2] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 379,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "2150b45b-1093-4b95-9e7f-5ac8e1700994",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[3] should allow setting an exchange admin account",
            "fullTitle": "IDEX EOS-ExchangeContract [3] should allow setting an exchange admin account",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setAdmin')\n    .send({\n        account: EXCHANGE_ADMIN,\n        isAdmin: true\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "81a6de93-8c7b-43e5-93ba-c1265fd61639",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "fullTitle": "IDEX EOS-ExchangeContract [4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "timedOut": false,
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setLockParameters')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        tradelockperiod: TRADE_LOCK_PERIOD,\n        fundsreleaseperiod: FUNDS_RELEASE_PERIOD\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bece3651-6d3f-4305-a2b9-91abe4495fad",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "efe32497-7abe-4f96-8397-83501d9935e4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[6] should allow user to lock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [6] should allow user to lock his exchange account",
            "timedOut": false,
            "duration": 208,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/lock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "154beed2-bb97-488e-8a18-c7dbc594f638",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[7] should have zero fee-account-ledger balance for symbol EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [7] should have zero fee-account-ledger balance for symbol EOS",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'EOS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6db961d8-aa93-4f5c-91b3-b8cb0eba94ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[8] should have zero fee-account-ledger balance for symbol SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [8] should have zero fee-account-ledger balance for symbol SYS",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'SYS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cfcd4db0-86e4-4be2-a0a6-51ed2e6a9bdd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 224,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fa389c86-8e0e-4893-b010-008c435e33a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3eef6113-3fe2-4b95-8611-bd557b915b88",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 211,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a2791b36-d0f0-4c7d-ab8a-a4a6934aebfd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 231,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1ee171aa-5ac8-4d29-84bd-3efd34c0e258",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 292,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8fb5e2c2-413a-469b-817e-3ff67a84c5ae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 184,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "628d3987-ccce-489a-be9b-1771db45ea47",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 187,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4e6b56a9-722e-4e34-8f9c-59ff49eb0be1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 257,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8bfcd253-1b75-4a93-9e45-501cc621e7b3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8a9e1625-fbe8-446e-ade9-1887bf81ebd3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 190,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6516e873-64f2-4abf-b801-5d6ab9733b76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5b59e1de-2572-496f-ac2e-9d598789bc5c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3a02bb21-2487-4211-8c41-78f9753d0de1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21] should allow for registering *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21] should allow for registering *maker1* accounts public_key",
            "timedOut": false,
            "duration": 281,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: MAKER1,\n        pubkey: process.env.USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "242515a4-6fa3-4946-8368-ffb2dd26470f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21.1] should allow checking for registered key for *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21.1] should allow checking for registered key for *maker1* accounts public_key",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/ispkpaired')\n    .send({\n        account: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var keyExists = JSON.parse(res.body.processed.action_traces[0].console.replace(/\\'/g, \"\\\"\"));\n        expect(keyExists.public_key_exists).to.equal(true);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cbb83c5e-77e3-4f55-bf8e-1e933c7c4ab0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[22] should allow for registering *taker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [22] should allow for registering *taker1* accounts public_key",
            "timedOut": false,
            "duration": 220,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: TAKER1,\n        pubkey: process.env.USER_PUB_KEY //IDEX_USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7b6a62ab-c4f9-4bbb-b053-d0d7ecd6257b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "fullTitle": "IDEX EOS-ExchangeContract [23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "timedOut": false,
            "duration": 490,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// log({\n//     amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     nonce: 1,\n//     amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     tradenonce: 1,\n//     tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     makerfee: MAKER_FEE,\n//     takerfee:TAKER_FEE,\n//     maker:MAKER1,\n//     taker: TAKER1,\n//     feeaccount:EXCHANGE\n// });\nreturn chai.request(uberdexAPI)\n    .post('/trade')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        nonce: 1,\n        amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        tradenonce: 1,\n        tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        makerfee: MAKER_FEE,\n        takerfee: TAKER_FEE,\n        maker: MAKER1,\n        taker: TAKER1,\n        feeaccount: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b042648-d4d7-4f54-90f0-19e64e2f1869",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "fullTitle": "IDEX EOS-ExchangeContract [24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "timedOut": false,
            "duration": 197,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var makerFee = getAmountForSymbol(balanceJson, \"SYS\");\n        var takerFee = getAmountForSymbol(balanceJson, \"EOS\");\n        log(\"makerFee:takerFee accrued on ledger account => EOS@\" + makerFee / 10000 + \":SYS@\" + takerFee / 10000);\n        expect(makerFee).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (MAKER_FEE / 10000));\n        expect(takerFee).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (TAKER_FEE / 10000));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4ed97fe9-e4fb-49ee-b113-3d060704f951",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 196,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Maker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Maker Bal should be->SYS@\" + (1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        log(\"Maker Bal should be->EOS@\" + (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens).to.equal(899.974 * 10000);\n        // expect(eos_tokens / 10000).to.equal((1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        // expect(sys_tokens / 10000).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c4ad042b-2f1f-4109-be7d-efaa12cd654a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Taker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Taker Bal should be->SYS@\" + (1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        log(\"Taker Bal should be->EOS@\" + (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        //expect(sys_tokens / 10000).to.equal((1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        //expect(eos_tokens / 10000).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(sys_tokens).to.equal(899.984 * 10000);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ce8b7676-f171-4b9a-a156-9c653de7ffb2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d6151cfc-05ea-4ffb-8303-0c6efda21db5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 225,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5c19b309-af34-476c-82b5-be7bf503e183",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "33471f5a-78ed-4977-883d-304a4dc6e540",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "63109036-4ee7-46e6-b0fe-aa37fe1c64cd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"LEDGER balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"LEDGER Bal should be-> 0.026 SYS\");\n        log(\"LEDGER Bal should be->0.016 EOS\");\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens / 10000).to.equal(0.026);\n        expect(sys_tokens / 10000).to.equal(0.016);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9cb90169-30f9-40a8-a9f3-559ed6953de4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.000 IQ",
            "timedOut": false,
            "duration": 281,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9e4ff95e-ae55-4149-abba-72eb7a758b67",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "fullTitle": "IDEX EOS-ExchangeContract [34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.000 IQ@everipediaiq",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_WITHDRAW_TRADE_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "402ce489-10d2-4314-9fca-63c7215b4b76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_WITHDRAW_AMOUNT,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a6c10845-c46e-4fa0-a07e-eee204db2cd6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[36] should allow order invalidations for nonce <= 50",
            "fullTitle": "IDEX EOS-ExchangeContract [36] should allow order invalidations for nonce <= 50",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/invalidateOrders')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: ESCAPE_HATCH_TEST_USER,\n        nonce: invalidate_orders_before_nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fbe76236-0d0d-44a0-af6a-3ea318868cbd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 243,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "52c733cf-f65a-43ff-a6c4-e71c4cc2e57e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 209,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 3\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "58c8a40a-2a20-4e78-9950-1aba942e3813",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[39] should allow user to unlock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [39] should allow user to unlock his exchange account",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/unlock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0055ab3e-32fa-4a86-8b29-fb57d3dda6da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: POST_UNLOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 4\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(400);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "48e992e6-5725-4c6e-87f6-aad742fa2afa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aed77e6b-58be-436c-b9a9-757e9bb88f1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should return EOS Derivative Token + Symbols",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should return EOS Derivative Token + Symbols",
            "timedOut": false,
            "duration": 165,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/symbols')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cfd2cee3-ec1d-4a05-b95a-9d8273f31eba",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[42] should return EOS Derivative Token Symbol Ticker",
            "fullTitle": "IDEX EOS-ExchangeContract [42] should return EOS Derivative Token Symbol Ticker",
            "timedOut": false,
            "duration": 34,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/ticker')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "531789c8-4049-43ad-9cda-c016a4c99401",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[43] should return Ticker data for a specific symbol => IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [43] should return Ticker data for a specific symbol => IQ",
            "timedOut": false,
            "duration": 85,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/tickerBySymbol')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a1132db4-7c40-498f-9539-2e1d3a99d1e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 122,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolBuySide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7d489df5-d390-47bd-a023-430f6f7598b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 46,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolSellSide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "917153a0-3867-4273-8182-044f2561cc34",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 26,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderbook')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3524665b-d139-4b76-9be7-1587a32c1254",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a11d27d0-7502-4226-bf03-a77ba45a8db7",
          "2150b45b-1093-4b95-9e7f-5ac8e1700994",
          "81a6de93-8c7b-43e5-93ba-c1265fd61639",
          "bece3651-6d3f-4305-a2b9-91abe4495fad",
          "efe32497-7abe-4f96-8397-83501d9935e4",
          "154beed2-bb97-488e-8a18-c7dbc594f638",
          "6db961d8-aa93-4f5c-91b3-b8cb0eba94ea",
          "cfcd4db0-86e4-4be2-a0a6-51ed2e6a9bdd",
          "fa389c86-8e0e-4893-b010-008c435e33a0",
          "3eef6113-3fe2-4b95-8611-bd557b915b88",
          "a2791b36-d0f0-4c7d-ab8a-a4a6934aebfd",
          "1ee171aa-5ac8-4d29-84bd-3efd34c0e258",
          "8fb5e2c2-413a-469b-817e-3ff67a84c5ae",
          "628d3987-ccce-489a-be9b-1771db45ea47",
          "4e6b56a9-722e-4e34-8f9c-59ff49eb0be1",
          "8bfcd253-1b75-4a93-9e45-501cc621e7b3",
          "8a9e1625-fbe8-446e-ade9-1887bf81ebd3",
          "6516e873-64f2-4abf-b801-5d6ab9733b76",
          "5b59e1de-2572-496f-ac2e-9d598789bc5c",
          "3a02bb21-2487-4211-8c41-78f9753d0de1",
          "242515a4-6fa3-4946-8368-ffb2dd26470f",
          "cbb83c5e-77e3-4f55-bf8e-1e933c7c4ab0",
          "7b6a62ab-c4f9-4bbb-b053-d0d7ecd6257b",
          "9b042648-d4d7-4f54-90f0-19e64e2f1869",
          "4ed97fe9-e4fb-49ee-b113-3d060704f951",
          "c4ad042b-2f1f-4109-be7d-efaa12cd654a",
          "ce8b7676-f171-4b9a-a156-9c653de7ffb2",
          "d6151cfc-05ea-4ffb-8303-0c6efda21db5",
          "5c19b309-af34-476c-82b5-be7bf503e183",
          "33471f5a-78ed-4977-883d-304a4dc6e540",
          "63109036-4ee7-46e6-b0fe-aa37fe1c64cd",
          "9cb90169-30f9-40a8-a9f3-559ed6953de4",
          "9e4ff95e-ae55-4149-abba-72eb7a758b67",
          "402ce489-10d2-4314-9fca-63c7215b4b76",
          "a6c10845-c46e-4fa0-a07e-eee204db2cd6",
          "fbe76236-0d0d-44a0-af6a-3ea318868cbd",
          "52c733cf-f65a-43ff-a6c4-e71c4cc2e57e",
          "58c8a40a-2a20-4e78-9950-1aba942e3813",
          "0055ab3e-32fa-4a86-8b29-fb57d3dda6da",
          "48e992e6-5725-4c6e-87f6-aad742fa2afa",
          "aed77e6b-58be-436c-b9a9-757e9bb88f1f",
          "cfd2cee3-ec1d-4a05-b95a-9d8273f31eba",
          "531789c8-4049-43ad-9cda-c016a4c99401",
          "a1132db4-7c40-498f-9539-2e1d3a99d1e1",
          "7d489df5-d390-47bd-a023-430f6f7598b8",
          "917153a0-3867-4273-8182-044f2561cc34",
          "3524665b-d139-4b76-9be7-1587a32c1254"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9997,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}