{
  "stats": {
    "suites": 1,
    "tests": 46,
    "passes": 46,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-27T16:33:24.529Z",
    "end": "2018-10-27T16:33:32.866Z",
    "duration": 8337,
    "testsRegistered": 46,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "92bf61e0-99bd-4e99-a1c9-15f7536f216f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "97306bf4-2dde-4d19-8bf1-e224c04a7c8e",
        "title": "IDEX EOS-ExchangeContract",
        "fullFile": "/Users/manjunath.reddy/f42/projects/byzantine/codes/UberDEX/test/UberDEX.unit.tests.js",
        "file": "/UberDEX.unit.tests.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "4ffbce36-71d5-4b20-af81-13e8fecabd16",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "IDEX EOS-ExchangeContract \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "de73a511-e878-466e-b0e8-ac9e1b3d9817",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "[1] should return matching node version => 4f4e5c22",
            "fullTitle": "IDEX EOS-ExchangeContract [1] should return matching node version => 4f4e5c22",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/info')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.server_version).to.be.an('string');\n        expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4586fea5-c82f-4513-a34b-72b6db850b53",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[2] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [2] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 270,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "4572988b-f528-4493-9aa5-b66bb4ca7c7d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[3] should allow setting an exchange admin account",
            "fullTitle": "IDEX EOS-ExchangeContract [3] should allow setting an exchange admin account",
            "timedOut": false,
            "duration": 250,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setAdmin')\n    .send({\n        account: EXCHANGE_ADMIN,\n        isAdmin: true\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "053f75f2-9e1d-49ce-b00f-25dd4576eaaa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "fullTitle": "IDEX EOS-ExchangeContract [4] should allow exchange admin to set release period to trigger escape hatch with t=1",
            "timedOut": false,
            "duration": 176,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/setLockParameters')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        tradelockperiod: TRADE_LOCK_PERIOD,\n        fundsreleaseperiod: FUNDS_RELEASE_PERIOD\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "f992673c-34bf-41b2-b888-671b1eb56e75",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [5] should allow EOS token deposit for escape-hatch-test from *escapeuser* for amount:3.1234 EOS",
            "timedOut": false,
            "duration": 237,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b7f03257-8449-42d7-9f28-a8a68f499e5e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[6] should allow user to lock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [6] should allow user to lock his exchange account",
            "timedOut": false,
            "duration": 175,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/lock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b63841a9-0102-4cdb-a10b-7307c5ace575",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[7] should have zero fee-account-ledger balance for symbol EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [7] should have zero fee-account-ledger balance for symbol EOS",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'EOS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "85f95e66-5df9-4ac5-bffb-e36e2872eccd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[8] should have zero fee-account-ledger balance for symbol SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [8] should have zero fee-account-ledger balance for symbol SYS",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/accountBalance')\n    .send({\n        user: LEDGER,\n        symbol: 'SYS'\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.instanceof(Array);\n        expect(res.body).to.have.length.below(1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d7cff6f4-54c8-4ea4-ad1b-f30770ca5fef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [9] should accept deposit from *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 202,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c1a0e575-75e0-42c8-ad3c-8103bffda04b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [10] should display exchange balances for *maker1* for amount:100.0000 EOS",
            "timedOut": false,
            "duration": 224,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "c3817f18-b8c6-4269-a08f-07a2b2309652",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [11] should withdraw exchange balance for *maker1* for amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 242,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "e005de62-f5a2-48c4-b7f6-283e1d1491c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [12] should display 0 exchange balance for *maker1* after withdrawal of amount:100.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 186,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8f316230-ccb5-495c-9731-bae5838e2afc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [13] should accept deposit from *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 193,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6a57f897-ef58-4b7c-8494-9ac08f237132",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [14] should display exchange balances for *taker1* for amount:100.0000 SYS",
            "timedOut": false,
            "duration": 316,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "54505d14-9166-47e1-88ab-2c0356f242dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [15] should withdraw exchange balance for *taker1* for amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 178,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "df1505b4-c2a6-4e2c-b65d-0a65c0acdc9f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [16] should display 0 exchange balance for *taker1* after withdrawal of amount:100.0000 SYS@eosio.token",
            "timedOut": false,
            "duration": 183,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(0);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d26c7991-c63b-4e42-a350-f62df0d1d1f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [17] should accept deposit from *maker1* for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 213,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MAKER1,\n        amount: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "dcfdae25-e349-4b27-8221-691e79f5e124",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [18] should accept deposit from *taker1* for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 191,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: TAKER1,\n        amount: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a3168811-b3da-4458-ba89-b63ea96e6a39",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "fullTitle": "IDEX EOS-ExchangeContract [19] should display exchange balance for *maker1* prior to trade for amount:1000.0000 EOS",
            "timedOut": false,
            "duration": 171,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,EOS@eosio.token\");\n        expect(balanceJson.account).to.equal(MAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5ab0f284-47e0-46d7-8368-a4f1f6c229fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "fullTitle": "IDEX EOS-ExchangeContract [20] should display exchange balances for *taker1* prior to trade for amount:1000.0000 SYS",
            "timedOut": false,
            "duration": 222,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceJson = JSON.parse((res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\"));\n        expect(balanceJson.amount).to.equal(TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') * 10000);\n        expect(balanceJson.token).to.equal(\"4,SYS@eosio.token\");\n        expect(balanceJson.account).to.equal(TAKER1);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d1cd2912-ad8f-4ac0-baf6-b30f405cb13e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[21] should allow for registering *maker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [21] should allow for registering *maker1* accounts public_key",
            "timedOut": false,
            "duration": 178,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: MAKER1,\n        pubkey: process.env.USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7e8c360d-9f29-4fe1-8417-29874e556f4c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[22] should allow for registering *taker1* accounts public_key",
            "fullTitle": "IDEX EOS-ExchangeContract [22] should allow for registering *taker1* accounts public_key",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/register')\n    .send({\n        account: TAKER1,\n        pubkey: process.env.USER_PUB_KEY //IDEX_USER_PUB_KEY\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6b30b561-defa-4e89-9086-edff8c0eaa00",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "fullTitle": "IDEX EOS-ExchangeContract [23] should enable execution of a trade match action with admin signature between *maker=maker1* & *taker=taker1* for maker amount:=>EOS:100 & taker amount:=>SYS:100",
            "timedOut": false,
            "duration": 467,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// log({\n//     amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     nonce: 1,\n//     amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n//     tradenonce: 1,\n//     tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g,''),\n//     makerfee: MAKER_FEE,\n//     takerfee:TAKER_FEE,\n//     maker:MAKER1,\n//     taker: TAKER1,\n//     feeaccount:EXCHANGE\n// });\nreturn chai.request(uberdexAPI)\n    .post('/trade')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        amountbuy: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        amountsell: (((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        nonce: 1,\n        amount: (((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '')) / 10) * 10000),\n        tradenonce: 1,\n        tokenbuy: TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        tokensell: MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^a-zA-Z]/g, ''),\n        makerfee: MAKER_FEE,\n        takerfee: TAKER_FEE,\n        maker: MAKER1,\n        taker: TAKER1,\n        feeaccount: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "392b6c2c-ba52-4d15-9a53-2a6453e84523",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "fullTitle": "IDEX EOS-ExchangeContract [24] should validate MAKER_FEE and TAKER_FEE  on ledger account after trade Action for MAKER_FEE=>160 & TAKER_FEE=>260",
            "timedOut": false,
            "duration": 176,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var makerFee = getAmountForSymbol(balanceJson, \"SYS\");\n        var takerFee = getAmountForSymbol(balanceJson, \"EOS\");\n        log(\"makerFee:takerFee accrued on ledger account => EOS@\" + makerFee / 10000 + \":SYS@\" + takerFee / 10000);\n        expect(makerFee).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (MAKER_FEE / 10000));\n        expect(takerFee).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10 * 100) * (TAKER_FEE / 10000));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b70d0823-a179-4f15-a694-13429d6f5b1a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [25] should validate Maker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 199,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: MAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Maker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Maker Bal should be->SYS@\" + (1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        log(\"Maker Bal should be->EOS@\" + (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens).to.equal(899.974 * 10000);\n        // expect(eos_tokens / 10000).to.equal((1000 - 100 - (MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (MAKER_FEE / 10000)));\n        // expect(sys_tokens / 10000).to.equal((MAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "fe9736d6-02ef-40b2-9bc1-ba6ee3204c21",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "fullTitle": "IDEX EOS-ExchangeContract [26] should validate Taker Balances & Token Symbols post Order match and Trade execution",
            "timedOut": false,
            "duration": 234,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: TAKER1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"Taker balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"Taker Bal should be->SYS@\" + (1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        log(\"Taker Bal should be->EOS@\" + (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        //expect(sys_tokens / 10000).to.equal((1000 - 100 - (TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10) * (TAKER_FEE / 10000)));\n        //expect(eos_tokens / 10000).to.equal((TAKER1_TEST_DEPOSIT_TRADE_AMOUNT.replace(/[^\\d\\.]*/g, '') / 10));\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(sys_tokens).to.equal(899.984 * 10000);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "da159d74-f104-4679-8708-230bb8b961f2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [27] should enable withdrawing exchange balance post-trade for *maker1* for amount:898.4000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 184,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8dcfb0da-2395-4fed-bd00-b55fb3a130f7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [28] should enable withdrawing exchange balance post-trade for *maker1* for amount:100.0000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 223,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MAKER1,\n        amount: MAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6d925cb1-f7d9-433e-93fa-e13cb0034128",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "fullTitle": "IDEX EOS-ExchangeContract [29] should enable withdrawing exchange balance post-trade for *taker1* for amount:100.0000 EOS@eosio.token with nonce=43",
            "timedOut": false,
            "duration": 181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_EOS,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ccc83298-5bb8-4f80-8b5e-913e33c0468e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "fullTitle": "IDEX EOS-ExchangeContract [30] should enable withdrawing exchange balance post-trade for *maker1* for amount:897.4000 SYS@eosio.token with nonce=44",
            "timedOut": false,
            "duration": 247,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: TAKER1,\n        amount: TAKER1_TEST_WITHDRAW_TRADE_BALANCE_SYS,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "9b701e41-aab0-4e82-b715-6ded37c7d06b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [31 & 32] should validate feeAccount [LEDGER] balance post-trade for amount:0.016 EOS@eosio.token && 0.026 SYS@eosio.token",
            "timedOut": false,
            "duration": 242,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/balance')\n    .send({\n        user: LEDGER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n        var balanceStr = (res.body.processed.action_traces[0].console).replace(/\\'/g, \"\\\"\");\n        var balanceJson = '[' + balanceStr.replace(/\\}{/g, \"\\},{\") + ']';\n        var eos_tokens = getAmountForSymbol(balanceJson, \"EOS\");\n        var sys_tokens = getAmountForSymbol(balanceJson, \"SYS\");\n        log(\"LEDGER balances on exchange post-trade => EOS@\" + eos_tokens / 10000 + \":SYS@\" + sys_tokens / 10000);\n        log(\"LEDGER Bal should be-> 0.026 SYS\");\n        log(\"LEDGER Bal should be->0.016 EOS\");\n        // TODO: @reddy: derive the amount based on fee structure in lieu of hardcoded math\n        expect(eos_tokens / 10000).to.equal(0.026);\n        expect(sys_tokens / 10000).to.equal(0.016);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "bc851128-8d2f-4b9f-abc5-358b3aa9f1fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.0000 IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [33] should allow IQ token deposit using everipediaiq token contract from *reddy* for amount:1.0000 IQ",
            "timedOut": false,
            "duration": 195,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/deposit')\n    .send({\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_DEPOSIT_TRADE_AMOUNT\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cddbe203-0d70-4be3-bf79-dafbf91c057e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.0000 IQ@everipediaiq",
            "fullTitle": "IDEX EOS-ExchangeContract [34] should allow IQ token withdraw using everipediaiq token contract from *reddy* for amount:1.0000 IQ@everipediaiq",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdraw')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: MULTI_TOKEN_CONTRACT_TEST_USER,\n        amount: MULTI_TOKEN_CONTRACT_WITHDRAW_TRADE_AMOUNT,\n        nonce: nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "49cdd546-9275-411a-ac23-e3a47e766487",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [35] should allow EOS token withdrawal without admin/exchange signatures for escape-hatch-test from *escapeuser* for amount:1.1234 EOS@eosio.token",
            "timedOut": false,
            "duration": 233,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: ESCAPE_HATCH_WITHDRAW_AMOUNT,\n        nonce: nonce + 1\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "0b7262b5-875d-46a7-9b5d-f5e0d294f79b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[36] should allow order invalidations for nonce <= 50",
            "fullTitle": "IDEX EOS-ExchangeContract [36] should allow order invalidations for nonce <= 50",
            "timedOut": false,
            "duration": 203,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/invalidateOrders')\n    .send({\n        admin: EXCHANGE_ADMIN,\n        account: ESCAPE_HATCH_TEST_USER,\n        nonce: invalidate_orders_before_nonce\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "72d79a67-feb1-4120-be73-96fdc3406785",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [37] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 272,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 2\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "db06b9f3-021c-4ea6-af1a-355cdc1468c0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [38] should allow token withdrawal when user_lock_period + inactivity time period is less than current block for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: LOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 3\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6887a1d5-ff66-42c9-91f8-34eaec1ac9c0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[39] should allow user to unlock his exchange account",
            "fullTitle": "IDEX EOS-ExchangeContract [39] should allow user to unlock his exchange account",
            "timedOut": false,
            "duration": 227,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/unlock')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a60329c1-c585-49a4-a94a-549185d1112d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "fullTitle": "IDEX EOS-ExchangeContract [40] should not allow token withdrawal via escape hatch route after user has unlocked account for *escapeuser* for amount:1.0000 EOS@eosio.token",
            "timedOut": false,
            "duration": 245,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/withdrawViaEscapeHatch')\n    .send({\n        account: ESCAPE_HATCH_TEST_USER,\n        amount: POST_UNLOCK_WITHDRAW_AMOUNT,\n        nonce: nonce + 4\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(400);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "1806e0f1-6531-4663-ae49-d6bdb0308fec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should reset *all* exchange accounts",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should reset *all* exchange accounts",
            "timedOut": false,
            "duration": 180,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .post('/reset')\n    .send({\n        owner: EXCHANGE\n    })\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        expect(res.body.transaction_id).to.be.an('string');\n        expect(res.body.processed.receipt.status).to.equal('executed');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "da663d14-5cb0-4907-ac0f-1ded39b6579c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[41] should return EOS Derivative Token + Symbols",
            "fullTitle": "IDEX EOS-ExchangeContract [41] should return EOS Derivative Token + Symbols",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/symbols')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ca7c7e22-73ac-49ec-b031-a94607213a3c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[42] should return EOS Derivative Token Symbol Ticker",
            "fullTitle": "IDEX EOS-ExchangeContract [42] should return EOS Derivative Token Symbol Ticker",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/ticker')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "69b370c4-94de-46d0-9581-02c31305f6b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[43] should return Ticker data for a specific symbol => IQ",
            "fullTitle": "IDEX EOS-ExchangeContract [43] should return Ticker data for a specific symbol => IQ",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/tickerBySymbol')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "89fb8594-fa7c-4ce9-8e60-bb132fef4b1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [44] should return BUY side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolBuySide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ecdc355f-5a82-4575-bc1a-3b8110547e04",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [45] should return SELL side Order data for a specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderBySymbolSellSide')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('array');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "71901070-8d0b-4f81-b1c5-6010041b6281",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "[46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "fullTitle": "IDEX EOS-ExchangeContract [46] should return LDAR Order book by specific symbol => IQ and depth=10",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return chai.request(uberdexAPI)\n    .get('/orderbook')\n    .then(function (res) {\n        log(res.body);\n        expect(res).to.have.status(200);\n        expect(res).to.be.json;\n        expect(res.body).to.be.an('object');\n        // expect(res.body.server_version).to.be.an('string');\n        //expect(res.body.server_version).to.equal('4f4e5c22');\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "76ae9e8e-173c-4621-8835-a00b48354116",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4586fea5-c82f-4513-a34b-72b6db850b53",
          "4572988b-f528-4493-9aa5-b66bb4ca7c7d",
          "053f75f2-9e1d-49ce-b00f-25dd4576eaaa",
          "f992673c-34bf-41b2-b888-671b1eb56e75",
          "b7f03257-8449-42d7-9f28-a8a68f499e5e",
          "b63841a9-0102-4cdb-a10b-7307c5ace575",
          "85f95e66-5df9-4ac5-bffb-e36e2872eccd",
          "d7cff6f4-54c8-4ea4-ad1b-f30770ca5fef",
          "c1a0e575-75e0-42c8-ad3c-8103bffda04b",
          "c3817f18-b8c6-4269-a08f-07a2b2309652",
          "e005de62-f5a2-48c4-b7f6-283e1d1491c9",
          "8f316230-ccb5-495c-9731-bae5838e2afc",
          "6a57f897-ef58-4b7c-8494-9ac08f237132",
          "54505d14-9166-47e1-88ab-2c0356f242dc",
          "df1505b4-c2a6-4e2c-b65d-0a65c0acdc9f",
          "d26c7991-c63b-4e42-a350-f62df0d1d1f6",
          "dcfdae25-e349-4b27-8221-691e79f5e124",
          "a3168811-b3da-4458-ba89-b63ea96e6a39",
          "5ab0f284-47e0-46d7-8368-a4f1f6c229fb",
          "d1cd2912-ad8f-4ac0-baf6-b30f405cb13e",
          "7e8c360d-9f29-4fe1-8417-29874e556f4c",
          "6b30b561-defa-4e89-9086-edff8c0eaa00",
          "392b6c2c-ba52-4d15-9a53-2a6453e84523",
          "b70d0823-a179-4f15-a694-13429d6f5b1a",
          "fe9736d6-02ef-40b2-9bc1-ba6ee3204c21",
          "da159d74-f104-4679-8708-230bb8b961f2",
          "8dcfb0da-2395-4fed-bd00-b55fb3a130f7",
          "6d925cb1-f7d9-433e-93fa-e13cb0034128",
          "ccc83298-5bb8-4f80-8b5e-913e33c0468e",
          "9b701e41-aab0-4e82-b715-6ded37c7d06b",
          "bc851128-8d2f-4b9f-abc5-358b3aa9f1fb",
          "cddbe203-0d70-4be3-bf79-dafbf91c057e",
          "49cdd546-9275-411a-ac23-e3a47e766487",
          "0b7262b5-875d-46a7-9b5d-f5e0d294f79b",
          "72d79a67-feb1-4120-be73-96fdc3406785",
          "db06b9f3-021c-4ea6-af1a-355cdc1468c0",
          "6887a1d5-ff66-42c9-91f8-34eaec1ac9c0",
          "a60329c1-c585-49a4-a94a-549185d1112d",
          "1806e0f1-6531-4663-ae49-d6bdb0308fec",
          "da663d14-5cb0-4907-ac0f-1ded39b6579c",
          "ca7c7e22-73ac-49ec-b031-a94607213a3c",
          "69b370c4-94de-46d0-9581-02c31305f6b0",
          "89fb8594-fa7c-4ce9-8e60-bb132fef4b1f",
          "ecdc355f-5a82-4575-bc1a-3b8110547e04",
          "71901070-8d0b-4f81-b1c5-6010041b6281",
          "76ae9e8e-173c-4621-8835-a00b48354116"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8321,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}