{"ast":null,"code":"import _classCallCheck from \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\byzanti\\\\byzanti-app\\\\src\\\\components\\\\scatter.js\";\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs'; // Don't forget to tell ScatterJS which plugins you are using.\n\nScatterJS.plugins(new ScatterEOS()); // Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\n\nvar network = {\n  blockchain: 'eos',\n  protocol: 'https',\n  host: 'nodes.get-scatter.com',\n  port: 443,\n  chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906' // First we need to connect to the user's Scatter.\n\n};\nScatterJS.scatter.connect('My-App').then(function (connected) {\n  // If the user does not have Scatter or it is Locked or Closed this will return false;\n  if (!connected) return false;\n  var scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n  // We're also going to require an account that is connected to the network we're using.\n\n  var requiredFields = {\n    accounts: [network]\n  };\n  scatter.getIdentity(requiredFields).then(function () {\n    // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n    // the user for their account name beforehand. They could still give you a different account.\n    var account = scatter.identity.accounts.find(function (x) {\n      return x.blockchain === 'eos';\n    }); // You can pass in any additional options you want into the eosjs reference.\n\n    var eosOptions = {\n      expireInSeconds: 60\n    }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n    var eos = scatter.eos(network, Eos, eosOptions); // ----------------------------\n    // Now that we have an identity,\n    // an EOSIO account, and a reference\n    // to an eosjs object we can send a transaction.\n    // ----------------------------\n    // Never assume the account's permission/authority. Always take it from the returned account.\n\n    var transactionOptions = {\n      authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n    };\n    eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(function (trx) {\n      // That's it!\n      console.log(\"Transaction ID: \".concat(trx.transaction_id));\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }).catch(function (error) {\n    // The user rejected this request, or doesn't have the appropriate requirements.\n    console.error(error);\n  });\n});\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    _classCallCheck(this, Home);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Home).apply(this, arguments));\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"about_page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["D:\\xampp\\htdocs\\byzanti\\byzanti-app\\src\\components\\scatter.js"],"names":["ScatterJS","ScatterEOS","Eos","plugins","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","eos","transactionOptions","authorization","name","authority","transfer","trx","console","log","transaction_id","catch","error","Home","Component"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACAF,SAAS,CAACG,OAAV,CAAmB,IAAIF,UAAJ,EAAnB,E,CAEA;AACA;;AACA,IAAMG,OAAO,GAAG;AACZC,EAAAA,UAAU,EAAC,KADC;AAEZC,EAAAA,QAAQ,EAAC,OAFG;AAGZC,EAAAA,IAAI,EAAC,uBAHO;AAIZC,EAAAA,IAAI,EAAC,GAJO;AAKZC,EAAAA,OAAO,EAAC,kEALI,CAQhB;;AARgB,CAAhB;AASAT,SAAS,CAACU,OAAV,CAAkBC,OAAlB,CAA0B,QAA1B,EAAoCC,IAApC,CAAyC,UAAAC,SAAS,EAAI;AAElD;AACA,MAAG,CAACA,SAAJ,EAAe,OAAO,KAAP;AAEf,MAAMH,OAAO,GAAGV,SAAS,CAACU,OAA1B,CALkD,CAOlD;AACA;;AACA,MAAMI,cAAc,GAAG;AAAEC,IAAAA,QAAQ,EAAC,CAACX,OAAD;AAAX,GAAvB;AACAM,EAAAA,OAAO,CAACM,WAAR,CAAoBF,cAApB,EAAoCF,IAApC,CAAyC,YAAM;AAE3C;AACA;AACA,QAAMK,OAAO,GAAGP,OAAO,CAACQ,QAAR,CAAiBH,QAAjB,CAA0BI,IAA1B,CAA+B,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACf,UAAF,KAAiB,KAArB;AAAA,KAAhC,CAAhB,CAJ2C,CAM3C;;AACA,QAAMgB,UAAU,GAAG;AAAEC,MAAAA,eAAe,EAAC;AAAlB,KAAnB,CAP2C,CAS3C;;AACA,QAAMC,GAAG,GAAGb,OAAO,CAACa,GAAR,CAAYnB,OAAZ,EAAqBF,GAArB,EAA0BmB,UAA1B,CAAZ,CAV2C,CAY3C;AACA;AACA;AACA;AACA;AAGA;;AACA,QAAMG,kBAAkB,GAAG;AAAEC,MAAAA,aAAa,EAAC,WAAIR,OAAO,CAACS,IAAZ,cAAoBT,OAAO,CAACU,SAA5B;AAAhB,KAA3B;AAEAJ,IAAAA,GAAG,CAACK,QAAJ,CAAaX,OAAO,CAACS,IAArB,EAA2B,YAA3B,EAAyC,YAAzC,EAAuD,MAAvD,EAA+DF,kBAA/D,EAAmFZ,IAAnF,CAAwF,UAAAiB,GAAG,EAAI;AAC3F;AACAC,MAAAA,OAAO,CAACC,GAAR,2BAA+BF,GAAG,CAACG,cAAnC;AACH,KAHD,EAGGC,KAHH,CAGS,UAAAC,KAAK,EAAI;AACdJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACH,KALD;AAOH,GA7BD,EA6BGD,KA7BH,CA6BS,UAAAC,KAAK,EAAI;AACd;AACAJ,IAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACH,GAhCD;AAiCH,CA3CD;;IA8CMC,I;;;;;;;;;;;;;6BACM;AAEJ,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAKH;;;;EARcC,S;;AAWnB,eAAeD,IAAf","sourcesContent":["import ScatterJS from 'scatterjs-core';\r\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\r\nimport Eos from 'eosjs';\r\n\r\n// Don't forget to tell ScatterJS which plugins you are using.\r\nScatterJS.plugins( new ScatterEOS() );\r\n\r\n// Networks are used to reference certain blockchains.\r\n// They let you get accounts and help you build signature providers.\r\nconst network = {\r\n    blockchain:'eos',\r\n    protocol:'https',\r\n    host:'nodes.get-scatter.com',\r\n    port:443,\r\n    chainId:'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\r\n}\r\n\r\n// First we need to connect to the user's Scatter.\r\nScatterJS.scatter.connect('My-App').then(connected => {\r\n\r\n    // If the user does not have Scatter or it is Locked or Closed this will return false;\r\n    if(!connected) return false;\r\n\r\n    const scatter = ScatterJS.scatter;\r\n\r\n    // Now we need to get an identity from the user.\r\n    // We're also going to require an account that is connected to the network we're using.\r\n    const requiredFields = { accounts:[network] };\r\n    scatter.getIdentity(requiredFields).then(() => {\r\n\r\n        // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\r\n        // the user for their account name beforehand. They could still give you a different account.\r\n        const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\r\n\r\n        // You can pass in any additional options you want into the eosjs reference.\r\n        const eosOptions = { expireInSeconds:60 };\r\n\r\n        // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\r\n        const eos = scatter.eos(network, Eos, eosOptions);\r\n\r\n        // ----------------------------\r\n        // Now that we have an identity,\r\n        // an EOSIO account, and a reference\r\n        // to an eosjs object we can send a transaction.\r\n        // ----------------------------\r\n\r\n\r\n        // Never assume the account's permission/authority. Always take it from the returned account.\r\n        const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\r\n\r\n        eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\r\n            // That's it!\r\n            console.log(`Transaction ID: ${trx.transaction_id}`);\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n\r\n    }).catch(error => {\r\n        // The user rejected this request, or doesn't have the appropriate requirements.\r\n        console.error(error);\r\n    });\r\n});\r\n\r\n\r\nclass Home extends Component{\r\n    render(){\r\n       \r\n        return(\r\n            <div className=\"about_page\">\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}